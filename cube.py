# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cubeui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtGui import QFontDatabase
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        id = QFontDatabase.addApplicationFont(':Fonts/CLICKUPPER.ttf')
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(300, 688)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(98, 93, 93))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        MainWindow.setIconSize(QtCore.QSize(128, 128))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.generateButton = QtWidgets.QPushButton(self.centralwidget)
        self.generateButton.setGeometry(QtCore.QRect(50, 180, 141, 21))
        self.generateButton.clicked.connect(self.generatefunc)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.generateButton.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Clickuper")
        self.generateButton.setFont(font)
        self.generateButton.setObjectName("generateButton")
        self.rotationButton = QtWidgets.QPushButton(self.centralwidget)
        self.rotationButton.setGeometry(QtCore.QRect(60, 400, 141, 23))
        self.rotationButton.clicked.connect(self.rotatefunc)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.rotationButton.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Clickuper")
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.rotationButton.setFont(font)
        self.rotationButton.setObjectName("rotationButton")
        self.rotationX = QtWidgets.QLineEdit(self.centralwidget)
        self.rotationX.setGeometry(QtCore.QRect(20, 300, 113, 20))
        self.rotationX.setObjectName("rotationX")
        self.rotationY = QtWidgets.QLineEdit(self.centralwidget)
        self.rotationY.setGeometry(QtCore.QRect(20, 330, 113, 20))
        self.rotationY.setObjectName("rotationY")
        self.rotationZ = QtWidgets.QLineEdit(self.centralwidget)
        self.rotationZ.setGeometry(QtCore.QRect(20, 360, 113, 20))
        self.rotationZ.setObjectName("rotationZ")
        self.rotateX = QtWidgets.QPushButton(self.centralwidget)
        self.rotateX.setGeometry(QtCore.QRect(150, 300, 81, 23))
        self.rotateX.setObjectName("rotateX")
        self.rotateX.clicked.connect(self.rotX)
        self.rotateY = QtWidgets.QPushButton(self.centralwidget)
        self.rotateY.setGeometry(QtCore.QRect(150, 330, 81, 23))
        self.rotateY.setObjectName("rotateY")
        self.rotateY.clicked.connect(self.rotY)
        self.rotateZ = QtWidgets.QPushButton(self.centralwidget)
        self.rotateZ.setGeometry(QtCore.QRect(150, 360, 81, 23))
        self.rotateZ.setObjectName("rotateZ")
        self.rotateZ.clicked.connect(self.rotZ)
        self.scaleX = QtWidgets.QLineEdit(self.centralwidget)
        self.scaleX.setGeometry(QtCore.QRect(60, 60, 113, 20))
        self.scaleX.setObjectName("scaleX")
        self.scaleY = QtWidgets.QLineEdit(self.centralwidget)
        self.scaleY.setGeometry(QtCore.QRect(60, 100, 113, 20))
        self.scaleY.setObjectName("scaleY")
        self.scaleZ = QtWidgets.QLineEdit(self.centralwidget)
        self.scaleZ.setGeometry(QtCore.QRect(60, 140, 113, 20))
        self.scaleZ.setObjectName("scaleZ")
        self.generateText = QtWidgets.QLabel(self.centralwidget)
        self.generateText.setGeometry(QtCore.QRect(40, 20, 191, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.generateText.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Clickuper")
        font.setPointSize(20)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.generateText.setFont(font)
        self.generateText.setObjectName("generateText")
        self.rotationText = QtWidgets.QLabel(self.centralwidget)
        self.rotationText.setGeometry(QtCore.QRect(10, 250, 231, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(210, 34, 34))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.rotationText.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Clickuper")
        font.setPointSize(20)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.rotationText.setFont(font)
        self.rotationText.setObjectName("rotationText")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1500, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.gen_flag = 0

    def generatefunc(self):
        if self.gen_flag == 0:
            if (self.scaleX.text() and self.scaleY.text() and self.scaleZ.text()):
                if (self.scaleX.text() == self.scaleY.text() == self.scaleZ.text()):
                    self.flag = 0
                    self.gen_flag = 1
                    self.main()

                else:
                    self.messagebox()
            else:
                self.othermessagebox()
        else:
            pass
    def messagebox(self):
        mbox = QMessageBox.question(self.centralwidget, "Ошибка!", "Введите одинаковые координаты x, y, z",
                                    QMessageBox.Yes | QMessageBox.No)
        if mbox==QMessageBox.Yes:
            pass
        elif mbox==QMessageBox.No:
            sys.exit()

    def othermessagebox(self):
        mbox = QMessageBox.question(self.centralwidget, "Ошибка!",
                                    "Внимание, пропущены необходимые поля",
                                    QMessageBox.Yes | QMessageBox.No)
        if mbox == QMessageBox.Yes:
            pass
        elif mbox == QMessageBox.No:
            sys.exit()

    def rotX(self):
        if self.rotationX.text() and not(self.rotationY.text() or self.rotationZ.text()):
            self.speedX = float(self.rotationX.text()) / 10
            self.flag = 1
        elif self.rotationY.text() and self.rotationX.text() and not self.rotationZ.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedY = float(self.rotationY.text()) / 10
            self.flag = 4
        elif self.rotationZ.text() and self.rotationX.text() and not self.rotationY.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 6
        elif self.rotationX.text() and self.rotationZ.text() and self.rotationZ.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedY = float(self.rotationY.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 7

    def rotY(self):
        if self.rotationY.text() and not(self.rotationX.text() or self.rotationZ.text()):
            self.speedY = float(self.rotationY.text()) / 10
            self.flag = 2
        elif self.rotationY.text() and self.rotationX.text() and not self.rotationZ.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedY = float(self.rotationY.text()) / 10
            self.flag = 4
        elif self.rotationY.text() and self.rotationZ.text() and not self.rotationX.text():
            self.speedY = float(self.rotationY.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 5
        elif self.rotationX.text() and self.rotationZ.text() and self.rotationZ.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedY = float(self.rotationY.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 7



    def rotZ(self):
        if self.rotationZ.text() and not(self.rotationX.text() or self.rotationY.text()):
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 3
        elif self.rotationZ.text() and self.rotationX.text() and not self.rotationY.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 6
        elif self.rotationZ.text() and self.rotationY.text() and not self.rotationX.text():
            self.speedY = float(self.rotationY.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 5
        elif self.rotationX.text() and self.rotationY.text() and self.rotationZ.text():
            self.speedX = float(self.rotationX.text()) / 10
            self.speedY = float(self.rotationY.text()) / 10
            self.speedZ = float(self.rotationZ.text()) / 10
            self.flag = 7

    def rotatefunc(self):
        self.flag = 0


    def main(self):
        k = int(self.scaleX.text()) / 20
        verticies = (
            (k, -k, -k),
            (k, k, -k),
            (-k, k, -k),
            (-k, -k, -k),
            (k, -k, k),
            (k, k, k),
            (-k, -k, k),
            (-k, k, k)
        )
        edges = (
            (0, 1),
            (0, 3),
            (0, 4),
            (2, 1),
            (2, 3),
            (2, 7),
            (6, 3),
            (6, 4),
            (6, 7),
            (5, 1),
            (5, 4),
            (5, 7)
        )
        pygame.init()
        display = (800, 700)
        pygame.display.set_caption("Visualition Cube")
        pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

        gluPerspective(45, (display[0] / display[1]), 0.1, 50.0)

        glTranslatef(0.0, 0.0, -4.0)
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        quit()
            if self.flag == 1:
                glRotatef(self.speedX, 0.0, 1.0, 0.0)
            elif self.flag == 2:
                glRotatef(self.speedY, 0.0, 0.0, 1.0)
            elif self.flag == 3:
                glRotatef(self.speedZ, 1.0, 0.0, 0.0)
            elif self.flag == 4:
                glRotatef((self.speedX + self.speedY) / 2, 0.0, 1.0, 1.0)
            elif self.flag == 5:
                glRotatef((self.speedZ + self.speedY) / 2, 1.0, 0.0, 1.0)
            elif self.flag == 6:
                glRotatef((self.speedX + self.speedZ) / 2, 1.0, 1.0, 0.0)
            elif self.flag == 7:
                glRotatef((self.speedX + self.speedY + self.speedZ) / 3, 1.0, 1.0, 1.0)
            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
            Cube(verticies, edges)
            pygame.display.flip()
            pygame.time.wait(10)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.generateButton.setText(_translate("MainWindow", "Generate"))
        self.rotationButton.setText(_translate("MainWindow", "Stop Rotation"))
        self.rotationX.setPlaceholderText(_translate("MainWindow", "Введите x"))
        self.rotationY.setPlaceholderText(_translate("MainWindow", "Введите y"))
        self.rotationZ.setPlaceholderText(_translate("MainWindow", "Введите z"))
        self.rotateX.setText(_translate("MainWindow", "Rotate"))
        self.rotateY.setText(_translate("MainWindow", "Rotate"))
        self.rotateZ.setText(_translate("MainWindow", "Rotate"))
        self.scaleX.setPlaceholderText(_translate("MainWindow", "Введите X"))
        self.scaleY.setPlaceholderText(_translate("MainWindow", "Введите Y"))
        self.scaleZ.setPlaceholderText(_translate("MainWindow", "Введите Z"))
        self.generateText.setText(_translate("MainWindow", "Cube Scale"))
        self.rotationText.setText(_translate("MainWindow", "Cube Rotation"))


def Cube(verticies, edges):
    glBegin(GL_LINES)
    for edge in edges:
        for vertex in edge:
            glVertex3fv(verticies[vertex])
            glColor4f(1.0, 0.0, 0.0, 0.0)
    glEnd()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
